var functions = require("firebase-functions");
var admin = require("firebase-admin");
var cors = require("cors")({ origin: true });
// package for push notifications
var webpush = require("web-push");
var fs = require("fs");
var UUID = require("uuid-v4");
var os = require("os");
var path = require("path");
var Busboy = require("busboy"); // used to parse buffer used by new google cloud storage tool which extracts form data into a buffer
// gitignored secrets:
const KEYS = require("./secrets");

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//

var serviceAccount = require("./pwagram-fb-key.json");

// config for google cloud storage (install the @google-cloud/storage package for your project)
const gcconfig = {
  projectId: KEYS.googleProjectId,
  keyFileName: "pwagram-fb-key.json", // service account json file: don't include the ./ in the string here
};

const { Storage } = require("@google-cloud/storage");
const gcs = new Storage(gcconfig);

//initialize app - go to firebase console for database url and credentials
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://pwa-practice-app-289604.firebaseio.com/",
});

exports.storePostData = functions.https.onRequest(function (request, response) {
  cors(request, response, function () {
    const busboy = new Busboy({ headers: request.headers });
    // These objects will store the values (file + fields) extracted from busboy
    let upload;
    const fields = {};

    // This callback will be invoked for each file uploaded
    busboy.on("file", (fieldname, file, filename, encoding, mimetype) => {
      console.log(
        `File [${fieldname}] filename: ${filename}, encoding: ${encoding}, mimetype: ${mimetype}`
      );
      const filepath = path.join(os.tmpdir(), filename);
      upload = { file: filepath, type: mimetype };
      file.pipe(fs.createWriteStream(filepath));
    });

    // This will invoked on every field detected
    busboy.on("field", function (
      fieldname,
      val,
      fieldnameTruncated,
      valTruncated,
      encoding,
      mimetype
    ) {
      fields[fieldname] = val;
    });

    var uuid = UUID(); // used to generate public url

    // This callback will be invoked after all uploaded files are saved.
    busboy.on("finish", () => {
      // upload the file into a bucket: find the default bucket name in Firebase Console -> Storage and copy the string after gs://
      const bucket = gcs.bucket("pwa-practice-app-289604.appspot.com");
      bucket.upload(
        upload.file,
        {
          uploadType: "media",
          metadata: {
            metadata: {
              contentType: upload.type,
              firebaseStorageDownloadTokens: uuid,
            },
          },
        },
        function (err, uploadedFile) {
          if (!err) {
            admin
              .database()
              .ref("posts")
              .push({
                id: fields.id,
                title: fields.title,
                location: fields.location,
                // url follows pattern automatically generated by firebase and uses the uuid token
                image:
                  "https://firebasestorage.googleapis.com/v0/b/" +
                  bucket.name +
                  "/o/" +
                  encodeURIComponent(uploadedFile.name) +
                  "?alt=media&token=" +
                  uuid,
              })
              .then(function () {
                // add vapid key security for push notifications (ensures they only come from your server to users)
                // pass identifier of self(email addr), the vapid public key, and the private vapid key (generated with npm package)
                webpush.setVapidDetails(
                  "mailto:myemail@email.com",
                  KEYS.publicVapidKey,
                  KEYS.secretVapidKey
                );

                // fetch subscriptions to send push notifications to
                return admin.database().ref("subscriptions").once("value");
              })
              .then(function (subscriptions) {
                subscriptions.forEach(function (sub) {
                  var pushConfig = {
                    endpoint: sub.val().endpoint, // the endpoint for the browser vendor server stored in the subscription in the database
                    keys: {
                      auth: sub.val().keys.auth,
                      p256dh: sub.val().keys.p256dh,
                    },
                  };
                  // sned push notification for each subscription
                  // the second arg is a payload you send with the push notification
                  // (the payload is used by the front end.  Pass whatever you want, this is not predefined). NOTE: there is a limit to the size of data you can send - images may be too big
                  // returns a promise, just catch and handle errors
                  webpush
                    .sendNotification(
                      pushConfig,
                      JSON.stringify({
                        title: "New Post",
                        content: "New Post added!",
                        openUrl: "/help",
                      })
                    )
                    .catch(function (err) {
                      console.log(err);
                    });
                });

                response
                  .status(201)
                  .json({ message: "Data stored", id: fields.id });
              })
              .catch(function (err) {
                response.status(500).json({ error: err });
              });
          } else {
            console.log(err);
          }
        }
      );
    });

    // The raw bytes of the upload will be in request.rawBody.  Send it to busboy, and get
    // a callback when it's finished.
    busboy.end(request.rawBody);
    // formData.parse(request, function(err, fields, files) {
    //   fs.rename(files.file.path, "/tmp/" + files.file.name);
    //   var bucket = gcs.bucket("YOUR_PROJECT_ID.appspot.com");
    // });
  });
});
